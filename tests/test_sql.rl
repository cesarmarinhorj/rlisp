; This test file shows some planned features of an SQL library

(require "rlunit.rl")
(require "sql.rl")

(test-suite SQL
  (test select
    (assert        (sql select * from foo)
     macroexpands: (sql-run "SELECT * FROM foo")
    )
    (assert        (sql select * from (foo bar))
     macroexpands: (sql-run "SELECT * FROM foo, bar")
    )
    (assert        (sql select (a.id b.id) from ((foo as a) (foo as b)))
     macroexpands: (sql-run "SELECT a.id, b.id FROM foo AS a, foo AS b")
    )
    (assert        (sql select * from foo where (id == 5))
     macroexpands: (sql-run "SELECT * FROM foo WHERE id=%" 5)
    )
    (assert        (sql select * from foo where (id < 5))
     macroexpands: (sql-run "SELECT * FROM foo WHERE id<%" 5)
    )
    (assert        (sql select * from foo where (id <= 5))
     macroexpands: (sql-run "SELECT * FROM foo WHERE id<=%" 5)
    )
    (assert        (sql select * from foo where (id > 5))
     macroexpands: (sql-run "SELECT * FROM foo WHERE id>%" 5)
    )
    (assert        (sql select * from foo where (id >= 5))
     macroexpands: (sql-run "SELECT * FROM foo WHERE id>=%" 5)
    )
    (assert        (sql select * from foo where (and (id == 5) (name = "foo")))
     macroexpands: (sql-run "SELECT * FROM foo WHERE (id=% AND name=%)" 5 "foo")
    )
    (assert        (sql select * from foo where (or (id == 5) (name = "foo")))
     macroexpands: (sql-run "SELECT * FROM foo WHERE (id=% OR name=%)" 5 "foo")
    )
    (assert        (sql select * from foo where (or (and (id == 5) (name = "foo")) (id = 10)))
     macroexpands: (sql-run "SELECT * FROM foo WHERE ((id=% AND name=%) OR id=%)" 5 "foo" 10)
    )
    (assert        (sql select * from foo order-by size)
     macroexpands: (sql-run "SELECT * FROM foo ORDER BY size")
    )
    (assert        (sql select * from foo order-by (- size))
     macroexpands: (sql-run "SELECT * FROM foo ORDER BY -size")
    )
    (assert        (sql select * from foo order-by size limit 10)
     macroexpands: (sql-run "SELECT * FROM foo ORDER BY size LIMIT 10")
    )
    (assert        (sql select * from foo order-by size limit 10 offset 20)
     macroexpands: (sql-run "SELECT * FROM foo ORDER BY size LIMIT 10 OFFSET 20")
    )
    (assert        (sql select ((count *) country) from foo group-by country)
     macroexpands: (sql-run "SELECT COUNT(*), country FROM foo GROUP BY country")
    )
    (assert        (sql select ((sum hit)) from foo group-by bar)
     macroexpands: (sql-run "SELECT SUM(hit) FROM foo GROUP BY bar")
    )
    (assert        (sql select ((max hit)) from foo group-by bar)
     macroexpands: (sql-run "SELECT MAX(hit) FROM foo GROUP BY bar")
    )
    (assert        (sql select ((min hit)) from foo group-by bar)
     macroexpands: (sql-run "SELECT MIN(hit) FROM foo GROUP BY bar")
    )
    (assert        (sql select ((avg hit)) from foo group-by bar)
     macroexpands: (sql-run "SELECT AVG(hit) FROM foo GROUP BY bar")
    )
  )
)
