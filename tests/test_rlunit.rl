(require "rlunit.rl")

(test-suite RLUnit
  (test assert
    (assert        (assert nil? foo)
     macroexpands: [self assert_nil foo])
    (assert        (assert nil? foo msg: "Failed")
     macroexpands: [self assert_nil foo "Failed"])
    (assert        (assert foo =~ bar)
     macroexpands: [self assert_match bar foo])
    (assert        (assert foo =~ bar msg: "Failed")
     macroexpands: [self assert_match bar foo "Failed"])
    (assert        (assert foo !~ bar)
     macroexpands: [self refute_match bar foo])
    (assert        (assert foo !~ bar msg: "Failed")
     macroexpands: [self refute_match bar foo "Failed"])
    (assert        (assert foo != bar)
     macroexpands: [self refute_equal bar foo])
    (assert        (assert foo != bar msg: "Failed")
     macroexpands: [self refute_equal bar foo "Failed"])
    (assert        (assert foo same: bar)
     macroexpands: [self assert_same bar foo])
    (assert        (assert foo same: bar msg: "Failed")
     macroexpands: [self assert_same bar foo "Failed"])
    (assert        (assert foo not-same: bar)
     macroexpands: [self refute_same bar foo])
    (assert        (assert foo not-same: bar msg: "Failed")
     macroexpands: [self refute_same bar foo "Failed"])
    (assert        (assert foo kind-of? bar)
     macroexpands: [self assert_kind_of bar foo])
    (assert        (assert foo kind-of? bar msg: "Failed")
     macroexpands: [self assert_kind_of bar foo "Failed"])
    (assert        (assert foo instance-of? bar)
     macroexpands: [self assert_instance_of bar foo])
    (assert        (assert foo instance-of? bar msg: "Failed")
     macroexpands: [self assert_instance_of bar foo "Failed"])
    (assert        (assert block: (code code code))
     macroexpands: [self assert_block & (fn () code code code)])
    (assert        (assert block: (code code code) msg: "Failure")
     macroexpands: [self assert_block "Failure" & (fn () code code code)])
    (assert        (assert msg: "Failure" block: (code code code))
     macroexpands: [self assert_block "Failure" & (fn () code code code)])
    (assert        (assert foo == bar delta: d)
     macroexpands: [self assert_in_delta bar foo d])
    (assert        (assert foo == bar delta: d msg: "Failure")
     macroexpands: [self assert_in_delta bar foo d "Failure"])
    (assert        (assert foo == bar msg: "Failure" delta: d)
     macroexpands: [self assert_in_delta bar foo d "Failure"])
    (assert        (assert foo == bar)
     macroexpands: [self assert_equal bar foo])
    (assert        (assert foo == bar msg: "Failure")
     macroexpands: [self assert_equal bar foo "Failure"])
    (assert        (assert foo bar)
     macroexpands: [self assert_equal bar foo])
    (assert        (assert foo bar msg: "Failure")
     macroexpands: [self assert_equal bar foo "Failure"])
    (assert        (assert foo msg: "Failure")
     macroexpands: [self assert foo "Failure"])
    (assert        (assert foo)
     macroexpands: [self assert foo])
    (assert        (assert foo macroexpands: bar)
     macroexpands: [self assert_equal 'bar (macroexpand-rec 'foo)])
    (assert        (assert foo macroexpands: bar msg: "Failure")
     macroexpands: [self assert_equal 'bar (macroexpand-rec 'foo) "Failure"])))
