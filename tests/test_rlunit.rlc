t1939 = globals[:require];t1940 = t1939.call("rlunit.rl")
module ::RLispC7793446;def self.anon_fn_2(globals);Proc.new do;true;end;end;end;module ::RLispC7793446;def self.anon_fn_1(globals);Proc.new do
t1942 = 2.send(:+, 7);t1943 = assert_equal(t1942, 9)
t1944 = 6.send(:-, 4);t1945 = assert_equal(t1944, 2)
t1946 = 6.send(:-, 4);t1947 = assert_equal(t1946, 2, "Subtraction should work")
t1948 = 4.send(:*, 3);t1949 = 8.send(:*, t1948);t1950 = assert_equal(t1949, 96)
t1951 = assert_nil(nil)
t1952 = assert(true)
t1953 = globals[:>];t1954 = t1953.call(3, 2);t1955 = assert(t1954)
t1956 = ::RLispC7793446::anon_fn_2(globals);t1957 = assert_block("assert_block failed", &t1956)
t1958 = globals[:not];t1959 = 3.send(:==, 7);t1960 = t1958.call(t1959);t1961 = assert(t1960)
t1962 = assert_in_delta(2.02, 1.99, 0.05, "Deviation is too high")
t1963 = [];t1964 = assert_instance_of(::Array, t1963)
t1965 = [:foo, :bar];t1966 = assert_instance_of(::Array, t1965)
t1967 = [:foo, :bar];t1968 = assert_kind_of(::Enumerable, t1967)
t1969 = globals[:rx];t1970 = t1969.call("(?i:foo)");t1971 = assert_match(t1970, "Foo")
t1972 = globals[:rx];t1973 = t1972.call("\\d+");t1974 = assert_match(t1973, "123")
t1975 = globals[:rx];t1976 = t1975.call("\\d+\\.\\d+");t1977 = assert_match(t1976, "Ruby 2.0")
t1978 = globals[:rx];t1979 = t1978.call("\\A\\d+\\.\\d+\\Z");t1980 = assert_no_match(t1979, "Ruby 2.0")
t1981 = globals[:rx];t1982 = t1981.call("\\d+\\.\\d+");t1983 = assert_match(t1982, "3.14159")
t1984 = globals[:rx];t1985 = t1984.call("\\A\\d+\\.\\d+\\Z");t1986 = assert_match(t1985, "3.14159")
t1987 = [];t1988 = assert_not_equal(nil, t1987)
t1989 = assert_same(false, false)
t1990 = assert_same(true, true);t1990;end;end;end;module ::RLispC7793446;def self.anon_fn(globals);Proc.new do
t1991 = ::RLispC7793446::anon_fn_1(globals);t1992 = define_method(:test_example, &t1991);t1992;end;end;end
t1941 = ::Class.send(:new, ::Test::Unit::TestCase);::Test_RLUnitExample = t1941;t1993 = ::RLispC7793446::anon_fn(globals);t1994 = ::Test_RLUnitExample.send(:instance_eval, &t1993)
